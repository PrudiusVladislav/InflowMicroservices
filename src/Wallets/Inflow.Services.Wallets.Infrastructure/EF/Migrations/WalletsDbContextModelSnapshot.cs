// <auto-generated />
using System;
using Inflow.Services.Wallets.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Inflow.Services.Wallets.Infrastructure.EF.Migrations
{
    [DbContext(typeof(WalletsDbContext))]
    partial class WalletsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Convey.MessageBrokers.Outbox.Messages.InboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Inbox");
                });

            modelBuilder.Entity("Convey.MessageBrokers.Outbox.Messages.OutboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<string>("MessageContextType")
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .HasColumnType("text");

                    b.Property<string>("OriginatedMessageId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerializedMessage")
                        .HasColumnType("text");

                    b.Property<string>("SerializedMessageContext")
                        .HasColumnType("text");

                    b.Property<string>("SpanContext")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Outbox");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Owners.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasDiscriminator<string>("Type").HasValue("Owner");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transfers");

                    b.HasDiscriminator<string>("Type").HasValue("Transfer");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId", "Currency")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Owners.Entities.CorporateOwner", b =>
                {
                    b.HasBaseType("Inflow.Services.Wallets.Core.Owners.Entities.Owner");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CorporateOwner");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Owners.Entities.IndividualOwner", b =>
                {
                    b.HasBaseType("Inflow.Services.Wallets.Core.Owners.Entities.Owner");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("IndividualOwner");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.IncomingTransfer", b =>
                {
                    b.HasBaseType("Inflow.Services.Wallets.Core.Wallets.Entities.Transfer");

                    b.HasDiscriminator().HasValue("IncomingTransfer");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.OutgoingTransfer", b =>
                {
                    b.HasBaseType("Inflow.Services.Wallets.Core.Wallets.Entities.Transfer");

                    b.HasDiscriminator().HasValue("OutgoingTransfer");
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.Transfer", b =>
                {
                    b.HasOne("Inflow.Services.Wallets.Core.Wallets.Entities.Wallet", null)
                        .WithMany("Transfers")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.Wallet", b =>
                {
                    b.HasOne("Inflow.Services.Wallets.Core.Owners.Entities.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inflow.Services.Wallets.Core.Wallets.Entities.Wallet", b =>
                {
                    b.Navigation("Transfers");
                });
#pragma warning restore 612, 618
        }
    }
}
